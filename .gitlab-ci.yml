---
image: python:latest

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml

variables:
  BUILD_CACHE: "${CI_PROJECT_DIR}/build_cache"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DS_PYTHON_VERSION: 3
  DS_PIP_VERSION: "20.0.2"
  PIP_REQUIREMENTS_FILE: "requirements.txt"
  SAST_DEFAULT_ANALYZERS: "bandit"
  SAST_DISABLE_DIND: "true"
  SAST_EXCLUDED_PATHS: ${CI_PROJECT_DIR}/build_cache,$CI_PROJECT_DIR/.cache/pip

cache:
  paths:
    - ${CI_PROJECT_DIR}/build_cache
    - .cache/pip
  key: ${CI_PROJECT_ID}

stages:
  - test
  - build
  - deploy

pylint:
  stage: test
  extends: .base-setup
  script:
    - pip3 install --upgrade pylint-exit anybadge
    - mkdir ./pylint
    - cd ./module && pylint *  -f parseable --ignore-imports=yes --output-format=text . | tee ../pylint/pylint.log || pylint-exit $? && cd -
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

code-quality:
  stage: test
  extends: .base-setup
  script:
    - pip3 install mypy
    - mypy --strict module/main/venvctl.py
    - mypy --strict module/cli/main.py
    - mypy --strict module/tests/test_*.py
  allow_failure: true

unit:
  stage: test
  extends: .base-setup
  script:
    - python -m module.tests.test_unit
    - python -m module.tests.test_configutils
  only:
    - development

coverage:
  stage: test
  extends: .base-setup
  script:
    - pip3 install codecov
    - coverage run -m module generate --config ./module/tests/config/venvs.json --out ${CI_PROJECT_DIR}/build_cache/venvs_coverage
    - coverage report -m
    - coverage html -d ${CI_PROJECT_DIR}/build_cache/tests/coverage
    - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
    - rm -rf ${CI_PROJECT_DIR}/build_cache/venvs_coverage
  only:
    - development
    - master

build:
  stage: build
  extends: .base-setup
  script:
      - rm -rf ${CI_PROJECT_DIR}/build_cache/venvs
      - pip3 install --upgrade -r requirements.txt
      - pip3 install --upgrade venvctl
      - python -m venvctl generate --config ./module/tests/config/venvs.json --out ${CI_PROJECT_DIR}/build_cache/venvs
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/build_cache/venvs
  when: manual
  only:
    - master

deploy:
  stage: deploy
  extends: .base-setup
  script:
    - pip3 install -r requirements.txt
    - echo $PYPIRC_INI > .pypirc
    - make clean
    - make pylint module
    - make upload
    - rm -rf .pypirc
  when: manual
  only:
    - master

.base-setup:
  before_script:
    - python --version
    - mkdir -p $BUILD_CACHE
    - pip3 install --upgrade pip virtualenv pylint
    - virtualenv venv
    - source venv/bin/activate
    - pip3 install -r requirements.txt
